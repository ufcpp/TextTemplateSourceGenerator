using Microsoft.CodeAnalysis.CSharp;
using System.Linq;
using TextTemplateSourceGenerator;
using Xunit;

namespace TextTemplateSourceGeneratorTest;

public class ClassMemberTest
{
    [Fact]
    public void EmptyTemplate()
    {
        var c = CompilationHelper.Compile(""""
                using TextTemplate;

                [TemplateClassMember("")]
                partial class A { }
                """", new TextTemplateGenerator());

        var diags = c.GetDiagnostics();
        Assert.Empty(c.GetDiagnostics());

        var tree = c.SyntaxTrees.First(t => t.FilePath.EndsWith("A_membertemplate.cs"));

        Assert.True(tree.IsEquivalentTo(SyntaxFactory.ParseSyntaxTree("""
                // <auto-generated/>
                #pragma warning disable 8019
                using TextTemplate;
                partial class A
                {
                }

                """)));
    }

    [Fact]
    public void TrivialTemplate()
    {
        var c = CompilationHelper.Compile(""""
                using TextTemplate;

                [TemplateClassMember("""
                    public const int X = 1;
                """)]
                partial class A { }
                """", new TextTemplateGenerator());

        var diags = c.GetDiagnostics();
        Assert.Empty(c.GetDiagnostics());

        var tree = c.SyntaxTrees.First(t => t.FilePath.EndsWith("A_membertemplate.cs"));

        Assert.True(tree.IsEquivalentTo(SyntaxFactory.ParseSyntaxTree("""
                // <auto-generated/>
                #pragma warning disable 8019
                using TextTemplate;
                partial class A
                {
                    public const int X = 1;
                }

                """)));
    }

    [Fact]
    public void TemplateA1()
    {
        var c = CompilationHelper.Compile(""""
                using TextTemplate;

                [TemplateClassMember("""
                $<
                var types = new[] { "bool", "byte", "int" };
                foreach (var t in types ) {
                $>\
                    public const $t X_$t = default;
                $<}$>
                """, Language = TemplateLanguage.ExperimentalA)]
                partial class A { }
                """", new TextTemplateGenerator());

        var diags = c.GetDiagnostics();
        Assert.Empty(c.GetDiagnostics());

        var tree = c.SyntaxTrees.First(t => t.FilePath.EndsWith("A_membertemplate.cs"));

        Assert.True(tree.IsEquivalentTo(SyntaxFactory.ParseSyntaxTree("""
                // <auto-generated/>
                #pragma warning disable 8019
                using TextTemplate;
                partial class A
                {
                    public const bool X_bool = default;
                    public const byte X_byte = default;
                    public const int X_int = default;
                }

                """)));
    }

    [Fact]
    public void TemplateScriban1()
    {
        var c = CompilationHelper.Compile(""""
                using TextTemplate;

                [TemplateClassMember("""
                {{ $x = ["a","abc","ABC"] -}}
                {{- for $i in 0..<$x.size }}
                    public const string X{{ $i }} = "{{ $x[$i] }}";
                {{- end }}
                """, Language = TemplateLanguage.Scriban)]
                partial class A { }
                """", new TextTemplateGenerator());

        var diags = c.GetDiagnostics();
        Assert.Empty(c.GetDiagnostics());

        var tree = c.SyntaxTrees.First(t => t.FilePath.EndsWith("A_membertemplate.cs"));

        Assert.True(tree.IsEquivalentTo(SyntaxFactory.ParseSyntaxTree("""
                // <auto-generated/>
                #pragma warning disable 8019
                using TextTemplate;
                partial class A
                {
                    public const string X0 = "a";
                    public const string X1 = "abc";
                    public const string X2 = "ABC";
                }

                """)));
    }
}
